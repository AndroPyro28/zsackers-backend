// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  ADMIN
  CUSTOMER
  STAFF
}

enum statuses {
  ACTIVE
  INACTIVE
}

enum productType {
  SINGLE
  BUNDLE
  ADDONS
}

model User {
  id                Int             @id @default(autoincrement())
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  email             String          @unique
  password          String
  hashUpdatePWToken String?
  isVerify          Boolean?        @default(false)
  role              ROLE
  profile           Profile?
  order_details     Order_Details[]
  Cart_Product      Cart_Product[]
  status            statuses        @default(ACTIVE)
  super_admin       Boolean?        @default(false)

  @@map("users")
}

model Profile {
  id        Int     @id @default(autoincrement())
  firstname String
  lastname  String
  contact   String
  address   String
  imageUrl  String?
  user      User    @relation(fields: [userId], references: [id])
  userId    Int     @unique

  @@map("profiles")
}

enum orderStatus {
  pending
  onGoing
  completed
  cancelled
}

enum transactionType {
  ONLINE
  WALK_IN
}

enum paymentMethods {
  cod
  gcash
  cash
}

model Order_Details {
  id               Int             @id @default(autoincrement())
  order_id         String          @unique
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  paymentMethod    String          @default("cash")
  totalAmount      Int
  contact          String          @default("Zsakers cafe")
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           Int
  address          String          @default("Zsakers Cafe")
  order_status     orderStatus     @default(pending)
  delivery_status  Int             @default(0)
  cart_product     Cart_Product[]
  transaction_type transactionType @default(ONLINE)
  cancel_reason    String          @default("")

  @@map("order_details")
}

model Cart_Product {
  id                   Int                    @id @default(autoincrement())
  quantity             Int?                   @default(1)
  product              Product                @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId            Int
  order_details        Order_Details?         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId              Int?
  isArchive            Boolean?               @default(false)
  user                 User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  note                 String?                @db.LongText
  userId               Int
  Cart_Product_Variant Cart_Product_Variant[]

  @@map("cart_products")
}

model Cart_Product_Variant {
  id              Int          @id @default(autoincrement())
  quantity        Int
  cart_product    Cart_Product @relation(fields: [cart_product_id], references: [id], onDelete: Cascade)
  cart_product_id Int
  product         Product      @relation(fields: [productId], references: [id])
  productId       Int

  @@map("Cart_Product_Variants")
}

model Category {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  sub_category Sub_Category[]
  Product      Product[]

  @@map("category")
}

model Sub_Category {
  id         Int       @id @default(autoincrement())
  name       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int
  Product    Product[]
  // set_category Set_Category[]

  @@map("sub_category")
}

model Bundles {
  id                    Int     @id @default(autoincrement())
  bundleParentProductId Int
  bundleParentProduct   Product @relation("bundleParentProduct", fields: [bundleParentProductId], references: [id], onDelete: Cascade)

  bundleChildProductId Int
  bundleChildProduct   Product @relation("bundleChildProduct", fields: [bundleChildProductId], references: [id], onDelete: Cascade)
}

model Product {
  id                   Int                    @id @default(autoincrement())
  productName          String
  price                Int
  quantity             Int                    @default(1)
  details              String?                @db.LongText
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  cart_product         Cart_Product[]
  stock                Int                    @default(0)
  image_url            String?
  image_id             String?
  category             Category?              @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId           Int?
  sub_category         Sub_Category?          @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  subcategoryId        Int?
  archive              Boolean                @default(false)
  productId            Int?
  Product              Product?               @relation("products", fields: [productId], references: [id], onDelete: SetNull)
  products             Product[]              @relation("products")
  productType          productType            @default(SINGLE)
  bundleParentProduct  Bundles[]              @relation("bundleParentProduct")
  bundleChildProduct   Bundles[]              @relation("bundleChildProduct")
  Cart_Product_Variant Cart_Product_Variant[]

  @@map("products")
}
